package verjinxer;


import static org.junit.Assert.*;

import java.io.File;
import java.io.IOException;
import java.util.Comparator;
import java.util.Random;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import verjinxer.sequenceanalysis.Alphabet;
import verjinxer.sequenceanalysis.IBigSuffixDLL;
import verjinxer.util.ArrayFile;
import verjinxer.util.HugeByteArray;
import verjinxer.util.HugeLongArray;

/**
 * @author Markus Kemmerling
 */
public class BigLCPTest {
   
   private static final File testdataDirectory = new File("testdata");
   private static final File testoutput = new File (testdataDirectory, "testoutput.lcp");
   private static final ArrayFile af = new ArrayFile(testoutput + "4");
   
   private final Alphabet alphabet = Alphabet.DNA();
   private final String[] buildingMethods4pos = {"L","R","minLR","bothLR2"}; //bothLR is not supported by LCP
   private final String[] buildingMethods4suffix = {"minLR"}; //bothLR is not supported by LCP

   /**
    * Checks, whether the directory 'testdata' exists on disc. If it already exist, an error message is printed and the programm exists.
    * If the directory does not exists, it is created and the lcp to check is stored there. 
    * 
    * @throws Exception
    */
   @BeforeClass
   public static void setUpBeforeClass() throws Exception {
      if (testdataDirectory.exists()) {
         System.err.printf("The directory %s already exists. Exiting before damage some data.",
               testdataDirectory.getAbsolutePath());
         System.exit(-1);
      } else {
         testdataDirectory.mkdir();
         testdataDirectory.deleteOnExit();
         assert testdataDirectory.exists();
         assert testdataDirectory.isDirectory();
      }
   }

   /**
    * Deletes the 'testdata' directory, that was used as output directory for the tests.
    * 
    * @throws Exception
    */
   @AfterClass
   public static void tearDownAfterClass() throws Exception {
      System.out.println("Deleting directory.");
      assert testdataDirectory.exists();
      File[] files = testdataDirectory.listFiles();
      for (int i = 0; i < files.length; i++) {
         System.out.printf("File: %s%n", files[i].getAbsolutePath());
      }
      
      testdataDirectory.delete();
      assert !testdataDirectory.exists();
   }
   
   @Test
   public void testBuildAndCheckDet() {
      byte[][] s = { 
            {1,1,3,1,2,1,1,3,1,2,4,0,-1,-2},
            {1,1,3,1,2,1,1,3,1,2,0,-1,-2},
            {4,4,2,2,4,1,2,4,4,2,1,3,3,3,2,2,1,4,1,1,1,3,2,2,4,0,-1,-2},
            {4,4,2,2,4,1,2,4,4,2,1,3,3,3,2,2,1,4,1,1,1,3,2,2,4,0,-1,-2},
            {4,3,2,1,4,3,2,1,4,3,2,4,1,3,2,4,1,3,2,4,4,4,2,3,1,3,2,4,1,4,0,-1,-2},
            {3,2,4,3,2,4,4,1,3,4,2,1,4,2,3,4,2,3,4,4,2,1,3,4,1,4,4,3,2,1,2,3,1,3,2,1,2,3,1,3,2,1,2,1,0,-1,-2},
            {4,3,1,4,3,2,4,1,2,1,3,2,1,2,3,1,4,2,3,4,1,2,3,4,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,0,-1,-2},
            {3,1,4,3,1,3,2,4,1,3,2,1,3,2,4,1,3,2,1,2,3,4,1,3,2,1,3,2,4,0,-1,-2},
            {4,3,4,3,2,1,3,2,4,1,3,2,4,1,3,2,4,1,2,3,4,1,3,2,4,1,3,2,4,1,2,3,4,0,-1,-2},
            {4,3,2,1,4,3,2,1,2,3,2,3,4,3,2,1,3,2,4,2,3,1,0,-1,-2},
            {1,2,4,1,4,2,3,1,4,2,1,4,3,2,1,4,3,2,0,-1,-2},
            {-1,-1,-1,-2},
            {4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,-1,-2},
            {1,2,1,0,0,3,2,4,2,1,2,-1,2,1,4,4,4,-1,-1,4,4,4,-1,4,4,4,2,1,0,0,2,4,4,4-1,-2}
      };
      
      HugeLongArray buffer = new HugeLongArray(0);

      for (int i = 0; i < s.length; i++) {
         HugeByteArray sequence = new HugeByteArray(s[i]);

         BigSuffixTrayBuilder builder = new BigSuffixTrayBuilder(sequence, alphabet, "suffix");
         Comparator<Suffix> comparator = new Suffix.ComparatorBySuffix();
         Suffix[] sa = Suffix.buildSuffixArray(s[i], comparator);
         for (String method : buildingMethods4suffix) {
            builder.build(method);
            IBigSuffixDLL suffixDLL = builder.getSuffixDLL();
            try {
               BigLCP.buildLcpAndWriteToFile(suffixDLL, method, "suffix", 4, testoutput, buffer);
               int[] lcp = af.readArray((int[]) null);

               new File(testoutput + "4").delete();
               new File(testoutput + "4x").delete();

               assertEquals(sa.length, lcp.length);
               for (int j = 1; j < sa.length; j++) {
                  int lcpValue = comparator.compare(sa[j - 1], sa[j]);
                  lcpValue = lcpValue == 0 ? sa[j - 1].string.length : Math.abs(lcpValue) - 1;
                  assertEquals(lcpValue, lcp[j]);
               }
            } catch (IllegalArgumentException e) {
               e.printStackTrace();
            } catch (IOException e) {
               e.printStackTrace();
            }
         }

         builder.setSpecialCharacterOrder("pos");
         comparator = new Suffix.ComparatorByPos(alphabet);
         sa = Suffix.buildSuffixArray(s[i], comparator);
         for (String method : buildingMethods4pos) {
            builder.build(method);
            IBigSuffixDLL suffixDLL = builder.getSuffixDLL();

            try {
               BigLCP.buildLcpAndWriteToFile(suffixDLL, method, "pos", 4, testoutput, buffer);
               int[] lcp = af.readArray((int[]) null);

               new File(testoutput + "4").delete();
               new File(testoutput + "4x").delete();

               assertEquals(sa.length, lcp.length);
               for (int j = 1; j < sa.length; j++) {
                  int lcpValue = comparator.compare(sa[j - 1], sa[j]);
                  lcpValue = lcpValue == 0 ? sa[j - 1].string.length : Math.abs(lcpValue) - 1;
                  assertEquals(lcpValue, lcp[j]);
               }
            } catch (IllegalArgumentException e) {
               e.printStackTrace();
            } catch (IOException e) {
               e.printStackTrace();
            }
         }
      }
   }
   
   @Test
   public void testBuildAndCheckRandom() {
      byte[] s = null;
      HugeLongArray buffer = new HugeLongArray(0);

      Random rand = new Random(100);

      for (int i = 0; i < 50; i++) {
         s = new byte[500 + rand.nextInt(500)];

         for (int j = 0; j < s.length - 1; j++) {
            s[j] = (byte) (rand.nextInt(6) - 1);
         }
         s[s.length - 1] = -2;

         HugeByteArray sequence = new HugeByteArray(s);

         BigSuffixTrayBuilder builder = new BigSuffixTrayBuilder(sequence, alphabet, "suffix");
         Comparator<Suffix> comparator = new Suffix.ComparatorBySuffix();
         Suffix[] sa = Suffix.buildSuffixArray(s, comparator);
         for (String method : buildingMethods4suffix) {
            builder.build(method);
            IBigSuffixDLL suffixDLL = builder.getSuffixDLL();

            try {
               BigLCP.buildLcpAndWriteToFile(suffixDLL, method, "suffix", 4, testoutput, buffer);
               int[] lcp = af.readArray((int[]) null);

               new File(testoutput + "4").delete();
               new File(testoutput + "4x").delete();

               assertEquals(sa.length, lcp.length);
               for (int j = 1; j < sa.length; j++) {
                  int lcpValue = comparator.compare(sa[j - 1], sa[j]);
                  lcpValue = lcpValue == 0 ? sa[j - 1].string.length : Math.abs(lcpValue) - 1;
                  assertEquals(lcpValue, lcp[j]);
               }
            } catch (IllegalArgumentException e) {
               e.printStackTrace();
            } catch (IOException e) {
               e.printStackTrace();
            }
         }

         builder.setSpecialCharacterOrder("pos");
         comparator = new Suffix.ComparatorByPos(alphabet);
         sa = Suffix.buildSuffixArray(s, comparator);
         for (String method : buildingMethods4pos) {
            builder.build(method);
            IBigSuffixDLL suffixDLL = builder.getSuffixDLL();

            try {
               BigLCP.buildLcpAndWriteToFile(suffixDLL, method, "pos", 4, testoutput, buffer);
               int[] lcp = af.readArray((int[]) null);

               new File(testoutput + "4").delete();
               new File(testoutput + "4x").delete();

               assertEquals(sa.length, lcp.length);
               for (int j = 1; j < sa.length; j++) {
                  int lcpValue = comparator.compare(sa[j - 1], sa[j]);
                  lcpValue = lcpValue == 0 ? sa[j - 1].string.length : Math.abs(lcpValue) - 1;
                  assertEquals(lcpValue, lcp[j]);
               }
            } catch (IllegalArgumentException e) {
               e.printStackTrace();
            } catch (IOException e) {
               e.printStackTrace();
            }
         }
      }
   }
   
   @Test
   public void testBuildAndCheckChrM() {
      byte[] s = {2,0,3,1,0,1,0,2,2,3,1,3,0,3,1,0,1,1,1,3,0,3,3,0,0,1,1,0,1,3,1,0,1,2,2,2,0,2,1,3,1,3,1,1,0,3,2,1,0,3,3,3,2,2,3,0,3,3,3,3,1,2,3,1,3,2,2,2,2,2,2,3,2,3,2,1,0,1,2,1,2,0,3,0,2,1,0,3,3,2,1,2,0,2,0,1,2,1,3,2,2,0,2,1,1,2,2,0,2,1,0,1,1,1,3,0,3,2,3,1,2,1,0,2,3,0,3,1,3,2,3,1,3,3,3,2,0,3,3,1,1,3,2,1,1,3,1,0,3,3,1,3,0,3,3,0,3,3,3,0,3,1,2,1,0,1,1,3,0,1,2,3,3,1,0,0,3,0,3,3,0,1,0,2,2,1,2,0,0,1,0,3,0,1,1,3,0,1,3,0,0,0,2,3,2,3,2,3,3,0,0,3,3,0,0,3,3,0,0,3,2,1,3,3,2,3,0,2,2,0,1,0,3,0,0,3,0,0,3,0,0,1,0,0,3,3,2,0,0,3,2,3,1,3,2,1,0,1,0,2,1,1,2,1,3,3,3,1,1,0,1,0,1,0,2,0,1,0,3,1,0,3,0,0,1,0,0,0,0,0,0,3,3,3,1,1,0,1,1,0,0,0,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,2,1,3,3,1,3,2,2,1,1,0,1,0,2,1,0,1,3,3,0,0,0,1,0,1,0,3,1,3,1,3,2,1,1,0,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,2,0,0,1,1,1,3,0,0,1,0,1,1,0,2,1,1,3,0,0,1,1,0,2,0,3,3,3,1,0,0,0,3,3,3,3,0,3,1,3,3,3,0,2,2,1,2,2,3,0,3,2,1,0,1,3,3,3,3,0,0,1,0,2,3,1,0,1,1,1,1,1,1,0,0,1,3,0,0,1,0,1,0,3,3,0,3,3,3,3,1,1,1,1,3,1,1,1,0,1,3,1,1,1,0,3,0,1,3,0,1,3,0,0,3,1,3,1,0,3,1,0,0,3,0,1,0,0,1,1,1,1,1,2,1,1,1,0,3,1,1,3,0,1,1,1,0,2,1,0,1,0,1,0,1,0,1,0,1,1,2,1,3,2,1,3,0,0,1,1,1,1,0,3,0,1,1,1,1,2,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,2,0,1,0,1,1,1,1,1,1,0,1,0,2,3,3,3,0,3,2,3,0,2,1,3,3,0,1,1,3,1,1,3,1,0,0,0,2,1,0,0,3,0,1,0,1,3,2,0,0,0,0,3,2,3,3,3,0,2,0,1,2,2,2,1,3,1,0,1,0,3,1,0,1,1,1,1,0,3,0,0,0,1,0,0,0,3,0,2,2,3,3,3,2,2,3,1,1,3,0,2,1,1,3,3,3,1,3,0,3,3,0,2,1,3,1,3,3,0,2,3,0,0,2,0,3,3,0,1,0,1,0,3,2,1,0,0,2,1,0,3,1,1,1,1,2,3,3,1,1,0,2,3,2,0,2,3,3,1,0,1,1,1,3,1,3,0,0,0,3,1,0,1,1,0,1,2,0,3,1,0,0,0,0,2,2,2,0,1,0,0,2,1,0,3,1,0,0,2,1,0,1,2,1,0,2,1,0,0,3,2,1,0,2,1,3,1,0,0,0,0,1,2,1,3,3,0,2,1,1,3,0,2,1,1,0,1,0,1,1,1,1,1,0,1,2,2,2,0,0,0,1,0,2,1,0,2,3,2,0,3,3,0,0,1,1,3,3,3,0,2,1,0,0,3,0,0,0,1,2,0,0,0,2,3,3,3,0,0,1,3,0,0,2,1,3,0,3,0,1,3,0,0,1,1,1,1,0,2,2,2,3,3,2,2,3,1,0,0,3,3,3,1,2,3,2,1,1,0,2,1,1,0,1,1,2,1,2,2,3,1,0,1,0,1,2,0,3,3,0,0,1,1,1,0,0,2,3,1,0,0,3,0,2,0,0,2,1,1,2,2,1,2,3,0,0,0,2,0,2,3,2,3,3,3,3,0,2,0,3,1,0,1,1,1,1,1,3,1,1,1,1,0,0,3,0,0,0,2,1,3,0,0,0,0,1,3,1,0,1,1,3,2,0,2,3,3,2,3,0,0,0,0,0,0,1,3,1,1,0,2,3,3,2,0,1,0,1,0,0,0,0,3,0,2,0,1,3,0,1,2,0,0,0,2,3,2,2,1,3,3,3,0,0,1,0,3,0,3,1,3,2,0,0,1,0,1,0,1,0,0,3,0,2,1,3,0,0,2,0,1,1,1,0,0,0,1,3,2,2,2,0,3,3,0,2,0,3,0,1,1,1,1,0,1,3,0,3,2,1,3,3,0,2,1,1,1,3,0,0,0,1,1,3,1,0,0,1,0,2,3,3,0,0,0,3,1,0,0,1,0,0,0,0,1,3,2,1,3,1,2,1,1,0,2,0,0,1,0,1,3,0,1,2,0,2,1,1,0,1,0,2,1,3,3,0,0,0,0,1,3,1,0,0,0,2,2,0,1,1,3,2,2,1,2,2,3,2,1,3,3,1,0,3,0,3,1,1,1,3,1,3,0,2,0,2,2,0,2,1,1,3,2,3,3,1,3,2,3,0,0,3,1,2,0,3,0,0,0,1,1,1,1,2,0,3,1,0,0,1,1,3,1,0,1,1,0,1,1,3,1,3,3,2,1,3,1,0,2,1,1,3,0,3,0,3,0,1,1,2,1,1,0,3,1,3,3,1,0,2,1,0,0,0,1,1,1,3,2,0,3,2,0,0,2,2,1,3,0,1,0,0,0,2,3,0,0,2,1,2,1,0,0,2,3,0,1,1,1,0,1,2,3,0,0,0,2,0,1,2,3,3,0,2,2,3,1,0,0,2,2,3,2,3,0,2,1,1,1,0,3,2,0,2,2,3,2,2,1,0,0,2,0,0,0,3,2,2,2,1,3,0,1,0,3,3,3,3,1,3,0,1,1,1,1,0,2,0,0,0,0,1,3,0,1,2,0,3,0,2,1,1,1,3,3,0,3,2,0,0,0,1,3,3,0,0,2,2,2,3,1,2,0,0,2,2,3,2,2,0,3,3,3,0,2,1,0,2,3,0,0,0,1,3,2,0,2,0,2,3,0,2,0,2,3,2,1,3,3,0,2,3,3,2,0,0,1,0,2,2,2,1,1,1,3,2,0,0,2,1,2,1,2,3,0,1,0,1,0,1,1,2,1,1,1,2,3,1,0,1,1,1,3,1,1,3,1,0,0,2,3,0,3,0,1,3,3,1,0,0,0,2,2,0,1,0,3,3,3,0,0,1,3,0,0,0,0,1,1,1,1,3,0,1,2,1,0,3,3,3,0,3,0,3,0,2,0,2,2,0,2,0,1,0,0,2,3,1,2,3,0,0,1,0,3,2,2,3,0,0,2,3,2,3,0,1,3,2,2,0,0,0,2,3,2,1,0,1,3,3,2,2,0,1,2,0,0,1,1,0,2,0,2,3,2,3,0,2,1,3,3,0,0,1,0,1,0,0,0,2,1,0,1,1,1,0,0,1,3,3,0,1,0,1,3,3,0,2,2,0,2,0,3,3,3,1,0,0,1,3,3,0,0,1,3,3,2,0,1,1,2,1,3,1,3,2,0,2,1,3,0,0,0,1,1,3,0,2,1,1,1,1,0,0,0,1,1,1,0,1,3,1,1,0,1,1,3,3,0,1,3,0,1,1,0,2,0,1,0,0,1,1,3,3,0,2,1,1,0,0,0,1,1,0,3,3,3,0,1,1,1,0,0,0,3,0,0,0,2,3,0,3,0,2,2,1,2,0,3,0,2,0,0,0,3,3,2,0,0,0,1,1,3,2,2,1,2,1,0,0,3,0,2,0,3,0,3,0,2,3,0,1,1,2,1,0,0,2,2,2,0,0,0,2,0,3,2,0,0,0,0,0,3,3,0,3,0,0,1,1,0,0,2,1,0,3,0,0,3,0,3,0,2,1,0,0,2,2,0,1,3,0,0,1,1,1,1,3,0,3,0,1,1,3,3,1,3,2,1,0,3,0,0,3,2,0,0,3,3,0,0,1,3,0,2,0,0,0,3,0,0,1,3,3,3,2,1,0,0,2,2,0,2,0,2,1,1,0,0,0,2,1,3,0,0,2,0,1,1,1,1,1,2,0,0,0,1,1,0,2,0,1,2,0,2,1,3,0,1,1,3,0,0,2,0,0,1,0,2,1,3,0,0,0,0,2,0,2,1,0,1,0,1,1,1,2,3,1,3,0,3,2,3,0,2,1,0,0,0,0,3,0,2,3,2,2,2,0,0,2,0,3,3,3,0,3,0,2,2,3,0,2,0,2,2,1,2,0,1,0,0,0,1,1,3,0,1,1,2,0,2,1,1,3,2,2,3,2,0,3,0,2,1,3,2,2,3,3,2,3,1,1,0,0,2,0,3,0,2,0,0,3,1,3,3,0,2,3,3,1,0,0,1,3,3,3,0,0,0,3,3,3,2,1,1,1,0,1,0,2,0,0,1,1,1,3,1,3,0,0,0,3,1,1,1,1,3,3,2,3,0,0,0,3,3,3,0,0,1,3,2,3,3,0,2,3,1,1,0,0,0,2,0,2,2,0,0,1,0,2,1,3,1,3,3,3,2,2,0,1,0,1,3,0,2,2,0,0,0,0,0,0,1,1,3,3,2,3,0,2,0,2,0,2,0,2,3,0,0,0,0,0,0,3,3,3,0,0,1,0,1,1,1,0,3,0,2,3,0,2,2,1,1,3,0,0,0,0,2,1,0,2,1,1,0,1,1,0,0,3,3,0,0,2,0,0,0,2,1,2,3,3,1,0,0,2,1,3,1,0,0,1,0,1,1,1,0,1,3,0,1,1,3,0,0,0,0,0,0,3,1,1,1,0,0,0,1,0,3,0,3,0,0,1,3,2,0,0,1,3,1,1,3,1,0,1,0,1,1,1,0,0,3,3,2,2,0,1,1,0,0,3,1,3,0,3,1,0,1,1,1,3,0,3,0,2,0,0,2,0,0,1,3,0,0,3,2,3,3,0,2,3,0,3,0,0,2,3,0,0,1,0,3,2,0,0,0,0,1,0,3,3,1,3,1,1,3,1,1,2,1,0,3,0,0,2,1,1,3,2,1,2,3,1,0,2,0,3,1,0,0,0,0,1,0,1,3,2,0,0,1,3,2,0,1,0,0,3,3,0,0,1,0,2,1,1,1,0,0,3,0,3,1,3,0,1,0,0,3,1,0,0,1,1,0,0,1,0,0,2,3,1,0,3,3,0,3,3,0,1,1,1,3,1,0,1,3,2,3,1,0,0,1,1,1,0,0,1,0,1,0,2,2,1,0,3,2,1,3,1,0,3,0,0,2,2,0,0,0,2,2,3,3,0,0,0,0,0,0,0,2,3,0,0,0,0,2,2,0,0,1,3,1,2,2,1,0,0,0,1,1,3,3,0,1,1,1,1,2,1,1,3,2,3,3,3,0,1,1,0,0,0,0,0,1,0,3,1,0,1,1,3,1,3,0,2,1,0,3,1,0,1,1,0,2,3,0,3,3,0,2,0,2,2,1,0,1,1,2,1,1,3,2,1,1,1,0,2,3,2,0,1,0,1,0,3,2,3,3,3,0,0,1,2,2,1,1,2,1,2,2,3,0,1,1,1,3,0,0,1,1,2,3,2,1,0,0,0,2,2,3,0,2,1,0,3,0,0,3,1,0,1,3,3,2,3,3,1,1,3,3,0,0,0,3,0,2,2,2,0,1,1,3,2,3,0,3,2,0,0,3,2,2,1,3,1,1,0,1,2,0,2,2,2,3,3,1,0,2,1,3,2,3,1,3,1,3,3,0,1,3,3,3,3,0,0,1,1,0,2,3,2,0,0,0,3,3,2,0,1,1,3,2,1,1,1,2,3,2,0,0,2,0,2,2,1,2,2,2,1,0,3,2,0,1,0,1,0,2,1,0,0,2,0,1,2,0,2,0,0,2,0,1,1,1,3,0,3,2,2,0,2,1,3,3,3,0,0,3,3,3,0,3,3,0,0,3,2,1,0,0,0,1,0,2,3,0,1,1,3,0,0,1,0,0,0,1,1,1,0,1,0,2,2,3,1,1,3,0,0,0,1,3,0,1,1,0,0,0,1,1,3,2,1,0,3,3,0,0,0,0,0,3,3,3,1,2,2,3,3,2,2,2,2,1,2,0,1,1,3,1,2,2,0,2,1,0,2,0,0,1,1,1,0,0,1,1,3,1,1,2,0,2,1,0,2,3,0,1,0,3,2,1,3,0,0,2,0,1,3,3,1,0,1,1,0,2,3,1,0,0,0,2,1,2,0,0,1,3,0,1,3,0,3,0,1,3,1,0,0,3,3,2,0,3,1,1,0,0,3,0,0,1,3,3,2,0,1,1,0,0,1,2,2,0,0,1,0,0,2,3,3,0,1,1,1,3,0,2,2,2,0,3,0,0,1,0,2,1,2,1,0,0,3,1,1,3,0,3,3,1,3,0,2,0,2,3,1,1,0,3,0,3,1,0,0,1,0,0,3,0,2,2,2,3,3,3,0,1,2,0,1,1,3,1,2,0,3,2,3,3,2,2,0,3,1,0,2,2,0,1,0,3,1,1,1,2,0,3,2,2,3,2,1,0,2,1,1,2,1,3,0,3,3,0,0,0,2,2,3,3,1,2,3,3,3,2,3,3,1,0,0,1,2,0,3,3,0,0,0,2,3,1,1,3,0,1,2,3,2,0,3,1,3,2,0,2,3,3,1,0,2,0,1,1,2,2,0,2,3,0,0,3,1,1,0,2,2,3,1,2,2,3,3,3,1,3,0,3,1,3,0,1,3,3,1,0,0,0,3,3,1,1,3,1,1,1,3,2,3,0,1,2,0,0,0,2,2,0,1,0,0,2,0,2,0,0,0,3,0,0,2,2,1,1,3,0,1,3,3,1,0,1,0,0,0,2,1,2,1,1,3,3,1,1,1,1,1,2,3,0,0,0,3,2,0,3,0,3,1,0,3,1,3,1,0,0,1,3,3,0,2,3,0,3,3,0,3,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,2,0,0,1,0,2,2,2,3,3,3,2,3,3,0,0,2,0,3,2,2,1,0,2,0,2,1,1,1,2,2,3,0,0,3,1,2,1,0,3,0,0,0,0,1,3,3,0,0,0,0,1,3,3,3,0,1,0,2,3,1,0,2,0,2,2,3,3,1,0,0,3,3,1,1,3,1,3,3,1,3,3,0,0,1,0,0,1,0,3,0,1,1,1,0,3,2,2,1,1,0,0,1,1,3,1,1,3,0,1,3,1,1,3,1,0,3,3,2,3,0,1,1,1,0,3,3,1,3,0,0,3,1,2,1,0,0,3,2,2,1,0,3,3,1,1,3,0,0,3,2,1,3,3,0,1,1,2,0,0,1,2,0,0,0,0,0,3,3,1,3,0,2,2,1,3,0,3,0,3,0,1,0,0,1,3,0,1,2,1,0,0,0,2,2,1,1,1,1,0,0,1,2,3,3,2,3,0,2,2,1,1,1,1,3,0,1,2,2,2,1,3,0,1,3,0,1,0,0,1,1,1,3,3,1,2,1,3,2,0,1,2,1,1,0,3,0,0,0,0,1,3,1,3,3,1,0,1,1,0,0,0,2,0,2,1,1,1,1,3,0,0,0,0,1,1,1,2,1,1,0,1,0,3,1,3,0,1,1,0,3,1,0,1,1,1,3,1,3,0,1,0,3,1,0,1,1,2,1,1,1,1,2,0,1,1,3,3,0,2,1,3,1,3,1,0,1,1,0,3,1,2,1,3,1,3,3,1,3,0,1,3,0,3,2,0,0,1,1,1,1,1,1,3,1,1,1,1,0,3,0,1,1,1,0,0,1,1,1,1,1,3,2,2,3,1,0,0,1,1,3,1,0,0,1,1,3,0,2,2,1,1,3,1,1,3,0,3,3,3,0,3,3,1,3,0,2,1,1,0,1,1,3,1,3,0,2,1,1,3,0,2,1,1,2,3,3,3,0,1,3,1,0,0,3,1,1,3,1,3,2,0,3,1,0,2,2,2,3,2,0,2,1,0,3,1,0,0,0,1,3,1,0,0,0,1,3,0,1,2,1,1,1,3,2,0,3,1,2,2,1,2,1,0,1,3,2,1,2,0,2,1,0,2,3,0,2,1,1,1,0,0,0,1,0,0,3,1,3,1,0,3,0,3,2,0,0,2,3,1,0,1,1,1,3,0,2,1,1,0,3,1,0,3,3,1,3,0,1,3,0,3,1,0,0,1,0,3,3,0,1,3,0,0,3,0,0,2,3,2,2,1,3,1,1,3,3,3,0,0,1,1,3,1,3,1,1,0,1,1,1,3,3,0,3,1,0,1,0,0,1,0,1,0,0,2,0,0,1,0,1,1,3,1,3,2,0,3,3,0,1,3,1,1,3,2,1,1,0,3,1,0,3,2,0,1,1,1,3,3,2,2,1,1,0,3,0,0,3,0,3,2,0,3,3,3,0,3,1,3,1,1,0,1,0,1,3,0,2,1,0,2,0,2,0,1,1,0,0,1,1,2,0,0,1,1,1,1,1,3,3,1,2,0,1,1,3,3,2,1,1,2,0,0,2,2,2,2,0,2,3,1,1,2,0,0,1,3,0,2,3,1,3,1,0,2,2,1,3,3,1,0,0,1,0,3,1,2,0,0,3,0,1,2,1,1,2,1,0,2,2,1,1,1,1,3,3,1,2,1,1,1,3,0,3,3,1,3,3,1,0,3,0,2,1,1,2,0,0,3,0,1,0,1,0,0,0,1,0,3,3,0,3,3,0,3,0,0,3,0,0,0,1,0,1,1,1,3,1,0,1,1,0,1,3,0,1,0,0,3,1,3,3,1,1,3,0,2,2,0,0,1,0,0,1,0,3,0,3,2,0,1,2,1,0,1,3,1,3,1,1,1,1,3,2,0,0,1,3,1,3,0,1,0,1,0,0,1,0,3,0,3,3,3,3,2,3,1,0,1,1,0,0,2,0,1,1,1,3,0,1,3,3,1,3,0,0,1,1,3,1,1,1,3,2,3,3,1,3,3,0,3,2,0,0,3,3,1,2,0,0,1,0,2,1,0,3,0,1,1,1,1,1,2,0,3,3,1,1,2,1,3,0,1,2,0,1,1,0,0,1,3,1,0,3,0,1,0,1,1,3,1,1,3,0,3,2,0,0,0,0,0,0,1,3,3,1,1,3,0,1,1,0,1,3,1,0,1,1,1,3,0,2,1,0,3,3,0,1,3,3,0,3,0,3,2,0,3,0,3,2,3,1,3,1,1,0,3,0,1,1,1,0,3,3,0,1,0,0,3,1,3,1,1,0,2,1,0,3,3,1,1,1,1,1,3,1,0,0,0,1,1,3,0,0,2,0,0,0,3,0,3,2,3,1,3,2,0,3,0,0,0,0,2,0,2,3,3,0,1,3,3,3,2,0,3,0,2,0,2,3,0,0,0,3,0,0,3,0,2,2,0,2,1,3,3,0,0,0,1,1,1,1,1,3,3,0,3,3,3,1,3,0,2,2,0,1,3,0,3,2,0,2,0,0,3,1,2,0,0,1,1,1,0,3,1,1,1,3,2,0,2,0,0,3,1,1,0,0,0,0,3,3,1,3,1,1,2,3,2,1,1,0,1,1,3,0,3,1,0,1,0,1,1,1,1,0,3,1,1,3,0,0,0,2,3,0,0,2,2,3,1,0,2,1,3,0,0,0,3,0,0,2,1,3,0,3,1,2,2,2,1,1,1,0,3,0,1,1,1,1,2,0,0,0,0,3,2,3,3,2,2,3,3,0,3,0,1,1,1,3,3,1,1,1,2,3,0,1,3,0,0,3,3,0,0,3,1,1,1,1,3,2,2,1,1,1,0,0,1,1,1,2,3,1,0,3,1,3,0,1,3,1,3,0,1,1,0,3,1,3,3,3,2,1,0,2,2,1,0,1,0,1,3,1,0,3,1,0,1,0,2,1,2,1,3,0,0,2,1,3,1,2,1,0,1,3,2,0,3,3,3,3,3,3,0,1,1,3,2,0,2,3,0,2,2,1,1,3,0,2,0,0,0,3,0,0,0,1,0,3,2,1,3,0,2,1,3,3,3,3,0,3,3,1,1,0,2,3,3,1,3,0,0,1,1,0,0,0,0,0,0,0,3,0,0,0,1,1,1,3,1,2,3,3,1,1,0,1,0,2,0,0,2,1,3,2,1,1,0,3,1,0,0,2,3,0,3,3,3,1,1,3,1,0,1,2,1,0,0,2,1,0,0,1,1,2,1,0,3,1,1,0,3,0,0,3,1,1,3,3,1,3,0,0,3,0,2,1,3,0,3,1,1,3,1,3,3,1,0,0,1,0,0,3,0,3,0,1,3,1,3,1,1,2,2,0,1,0,0,3,2,0,0,1,1,0,3,0,0,1,1,0,0,3,0,1,3,0,1,1,0,0,3,1,0,0,3,0,1,3,1,0,3,1,0,3,3,0,0,3,0,0,3,1,0,3,0,0,3,2,2,1,3,0,3,0,2,1,0,0,3,0,0,0,0,1,3,0,2,2,0,0,3,0,2,1,1,1,1,1,3,3,3,1,0,1,3,3,1,3,2,0,2,3,1,1,1,0,2,0,2,2,3,3,0,1,1,1,0,0,2,2,1,0,1,1,1,1,3,1,3,2,0,1,0,3,1,1,2,2,1,1,3,2,1,3,3,1,3,3,1,3,1,0,1,0,3,2,0,1,0,0,0,0,0,1,3,0,2,1,1,1,1,1,0,3,1,3,1,0,0,3,1,0,3,0,3,0,1,1,0,0,0,3,1,3,1,3,1,1,1,3,1,0,1,3,0,0,0,1,2,3,0,0,2,1,1,3,3,1,3,1,1,3,1,0,1,3,1,3,1,3,1,0,0,3,1,3,3,0,3,1,1,0,3,1,0,3,0,2,1,0,2,2,1,0,2,3,3,2,0,2,2,3,2,2,0,3,3,0,0,0,1,1,0,0,0,1,1,1,0,2,1,3,0,1,2,1,0,0,0,0,3,1,3,3,0,2,1,0,3,0,1,3,1,1,3,1,0,0,3,3,0,1,1,1,0,1,0,3,0,2,2,0,3,2,0,0,3,0,0,3,0,2,1,0,2,3,3,1,3,0,1,1,2,3,0,1,0,0,1,1,1,3,0,0,1,0,3,0,0,1,1,0,3,3,1,3,3,0,0,3,3,3,0,0,1,3,0,3,3,3,0,3,0,3,3,0,3,1,1,3,0,0,1,3,0,1,3,0,1,1,2,1,0,3,3,1,1,3,0,1,3,0,1,3,1,0,0,1,3,3,0,0,0,1,3,1,1,0,2,1,0,1,1,0,1,2,0,1,1,1,3,0,1,3,0,1,3,0,3,1,3,1,2,1,0,1,1,3,2,0,0,0,1,0,0,2,1,3,0,0,1,0,3,2,0,1,3,0,0,1,0,1,1,1,3,3,0,0,3,3,1,1,0,3,1,1,0,1,1,1,3,1,1,3,1,3,1,1,1,3,0,2,2,0,2,2,1,1,3,2,1,1,1,1,1,2,1,3,0,0,1,1,2,2,1,3,3,3,3,3,2,1,1,1,0,0,0,3,2,2,2,1,1,0,3,3,0,3,1,2,0,0,2,0,0,3,3,1,0,1,0,0,0,0,0,0,1,0,0,3,0,2,1,1,3,1,0,3,1,0,3,1,1,1,1,0,1,1,0,3,1,0,3,0,2,1,1,0,1,1,0,3,1,0,1,1,1,3,1,1,3,3,0,0,1,1,3,1,3,0,1,3,3,1,3,0,1,1,3,0,1,2,1,1,3,0,0,3,1,3,0,1,3,1,1,0,1,1,3,1,0,0,3,1,0,1,0,1,3,0,1,3,1,1,1,1,0,3,0,3,1,3,0,0,1,0,0,1,2,3,0,0,0,0,0,3,0,0,0,0,3,2,0,1,0,2,3,3,3,2,0,0,1,0,3,0,1,0,0,0,0,1,1,1,0,1,1,1,1,0,3,3,1,1,3,1,1,1,1,0,1,0,1,3,1,0,3,1,2,1,1,1,3,3,0,1,1,0,1,2,1,3,0,1,3,1,1,3,0,1,1,3,0,3,1,3,1,1,1,1,3,3,3,3,0,3,0,1,3,0,0,3,0,0,3,1,3,3,0,3,0,2,0,0,0,3,3,3,0,2,2,3,3,0,0,0,3,0,1,0,2,0,1,1,0,0,2,0,2,1,1,3,3,1,0,0,0,2,1,1,1,3,1,0,2,3,0,0,2,3,3,2,1,0,0,3,0,1,3,3,0,0,3,3,3,1,3,2,1,0,0,1,0,2,1,3,0,0,2,2,0,1,3,2,1,0,0,0,0,1,1,1,1,0,1,3,1,3,2,1,0,3,1,0,0,1,3,2,0,0,1,2,1,0,0,0,3,1,0,2,1,1,0,1,3,3,3,0,0,3,3,0,0,2,1,3,0,0,2,1,1,1,3,3,0,1,3,0,2,0,1,1,0,0,3,2,2,2,0,1,3,3,0,0,0,1,1,1,0,1,0,0,0,1,0,1,3,3,0,2,3,3,0,0,1,0,2,1,3,0,0,2,1,0,1,1,1,3,0,0,3,1,0,0,1,3,2,2,1,3,3,1,0,0,3,1,3,0,1,3,3,1,3,1,1,1,2,1,1,2,1,1,2,2,2,0,0,0,0,0,0,2,2,1,2,2,2,0,2,0,0,2,1,1,1,1,2,2,1,0,2,2,3,3,3,2,0,0,2,1,3,2,1,3,3,1,3,3,1,2,0,0,3,3,3,2,1,0,0,3,3,1,0,0,3,0,3,2,0,0,0,0,3,1,0,1,1,3,1,2,2,0,2,1,3,2,2,3,0,0,0,0,0,2,0,2,2,1,1,3,0,0,1,1,1,1,3,2,3,1,3,3,3,0,2,0,3,3,3,0,1,0,2,3,1,1,0,0,3,2,1,3,3,1,0,1,3,1,0,2,1,1,0,3,3,3,3,0,1,1,3,1,0,1,1,1,1,1,0,1,3,2,0,3,2,3,3,1,2,1,1,2,0,1,1,2,3,3,2,0,1,3,0,3,3,1,3,1,3,0,1,0,0,0,1,1,0,1,0,0,0,2,0,1,0,3,3,2,2,0,0,1,0,1,3,0,3,0,1,1,3,0,3,3,0,3,3,1,2,2,1,2,1,0,3,2,0,2,1,3,2,2,0,2,3,1,1,3,0,2,2,1,0,1,0,2,1,3,1,3,0,0,2,1,1,3,1,1,3,3,0,3,3,1,2,0,2,1,1,2,0,2,1,3,2,2,2,1,1,0,2,1,1,0,2,2,1,0,0,1,1,3,3,1,3,0,2,2,3,0,0,1,2,0,1,1,0,1,0,3,1,3,0,1,0,0,1,2,3,3,0,3,1,2,3,1,0,1,0,2,1,1,1,0,3,2,1,0,3,3,3,2,3,0,0,3,0,0,3,1,3,3,1,3,3,1,0,3,0,2,3,0,0,3,0,1,1,1,0,3,1,0,3,0,0,3,1,2,2,0,2,2,1,3,3,3,2,2,1,0,0,1,3,2,0,1,3,0,2,3,3,1,1,1,1,3,0,0,3,0,0,3,1,2,2,3,2,1,1,1,1,1,2,0,3,0,3,2,2,1,2,3,3,3,1,1,1,1,2,1,0,3,0,0,0,1,0,0,1,0,3,0,0,2,1,3,3,1,3,2,0,1,3,1,3,3,0,1,1,3,1,1,1,3,1,3,1,3,1,1,3,0,1,3,1,1,3,2,1,3,1,2,1,0,3,1,3,2,1,3,0,3,0,2,3,2,2,0,2,2,1,1,2,2,0,2,1,0,2,2,0,0,1,0,2,2,3,3,2,0,0,1,0,2,3,1,3,0,1,1,1,3,1,1,1,3,3,0,2,1,0,2,2,2,0,0,1,3,0,1,3,1,1,1,0,1,1,1,3,2,2,0,2,1,1,3,1,1,2,3,0,2,0,1,1,3,0,0,1,1,0,3,1,3,3,1,3,1,1,3,3,0,1,0,1,1,3,0,2,1,0,2,2,3,2,3,1,3,1,1,3,1,3,0,3,1,3,3,0,2,2,2,2,1,1,0,3,1,0,0,3,3,3,1,0,3,1,0,1,0,0,1,0,0,3,3,0,3,1,0,0,3,0,3,0,0,0,0,1,1,1,1,1,3,2,1,1,0,3,0,0,1,1,1,0,0,3,0,1,1,0,0,0,1,2,1,1,1,1,3,1,3,3,1,2,3,1,3,2,0,3,1,1,2,3,1,1,3,0,0,3,1,0,1,0,2,1,0,2,3,1,1,3,0,1,3,3,1,3,1,1,3,0,3,1,3,1,3,1,1,1,0,2,3,1,1,3,0,2,1,3,2,1,3,2,2,1,0,3,1,0,1,3,0,3,0,1,3,0,1,3,0,0,1,0,2,0,1,1,2,1,0,0,1,1,3,1,0,0,1,0,1,1,0,1,1,3,3,1,3,3,1,2,0,1,1,1,1,2,1,1,2,2,0,2,2,0,2,2,0,2,0,1,1,1,1,0,3,3,1,3,0,3,0,1,1,0,0,1,0,1,1,3,0,3,3,1,3,2,0,3,3,3,3,3,1,2,2,3,1,0,1,1,1,3,2,0,0,2,3,3,3,0,3,0,3,3,1,3,3,0,3,1,1,3,0,1,1,0,2,2,1,3,3,1,2,2,0,0,3,0,0,3,1,3,1,1,1,0,3,0,3,3,2,3,0,0,1,3,3,0,1,3,0,1,3,1,1,2,2,0,0,0,0,0,0,0,2,0,0,1,1,0,3,3,3,2,2,0,3,0,1,0,3,0,2,2,3,0,3,2,2,3,1,3,2,0,2,1,3,0,3,2,0,3,0,3,1,0,0,3,3,2,2,1,3,3,1,1,3,0,2,2,2,3,3,3,0,3,1,2,3,2,3,2,0,2,1,0,1,0,1,1,0,3,0,3,0,3,3,3,0,1,0,2,3,0,2,2,0,0,3,0,2,0,1,2,3,0,2,0,1,0,1,0,1,2,0,2,1,0,3,0,3,3,3,1,0,1,1,3,1,1,2,1,3,0,1,1,0,3,0,0,3,1,0,3,1,2,1,3,0,3,1,1,1,1,0,1,1,2,2,1,2,3,1,0,0,0,2,3,0,3,3,3,0,2,1,3,2,0,1,3,1,2,1,1,0,1,0,1,3,1,1,0,1,2,2,0,0,2,1,0,0,3,0,3,2,0,0,0,3,2,0,3,1,3,2,1,3,2,1,0,2,3,2,1,3,1,3,2,0,2,1,1,1,3,0,2,2,0,3,3,1,0,3,1,3,3,3,1,3,3,3,3,1,0,1,1,2,3,0,2,2,3,2,2,1,1,3,2,0,1,3,2,2,1,0,3,3,2,3,0,3,3,0,2,1,0,0,0,1,3,1,0,3,1,0,1,3,0,2,0,1,0,3,1,2,3,0,1,3,0,1,0,1,2,0,1,0,1,2,3,0,1,3,0,1,2,3,3,2,3,0,2,1,3,1,0,1,3,3,1,1,0,1,3,0,3,2,3,1,1,3,0,3,1,0,0,3,0,2,2,0,2,1,3,2,3,0,3,3,3,2,1,1,0,3,1,0,3,0,2,2,0,2,2,1,3,3,1,0,3,3,1,0,1,3,2,0,3,3,3,1,1,1,1,3,0,3,3,1,3,1,0,2,2,1,3,0,1,0,1,1,1,3,0,2,0,1,1,0,0,0,1,1,3,0,1,2,1,1,0,0,0,0,3,1,1,0,3,3,3,1,0,1,3,0,3,1,0,3,0,3,3,1,0,3,1,2,2,1,2,3,0,0,0,3,1,3,0,0,1,3,3,3,1,3,3,1,1,1,0,1,0,0,1,0,1,3,3,3,1,3,1,2,2,1,1,3,0,3,1,1,2,2,0,0,3,2,1,1,1,1,2,0,1,2,3,3,0,1,3,1,2,2,0,1,3,0,1,1,1,1,2,0,3,2,1,0,3,0,1,0,1,1,0,1,0,3,2,0,0,0,1,0,3,1,1,3,0,3,1,0,3,1,3,2,3,0,2,2,1,3,1,0,3,3,1,0,3,3,3,1,3,1,3,0,0,1,0,2,1,0,2,3,0,0,3,0,3,3,0,0,3,0,0,3,3,3,3,1,0,3,2,0,3,3,3,2,0,2,0,0,2,1,1,3,3,1,2,1,3,3,1,2,0,0,2,1,2,0,0,0,0,2,3,1,1,3,0,0,3,0,2,3,0,2,0,0,2,0,0,1,1,1,3,1,1,0,3,0,0,0,1,1,3,2,2,0,2,3,2,0,1,3,0,3,0,3,2,2,0,3,2,1,1,1,1,1,1,0,1,1,1,3,0,1,1,0,1,0,1,0,3,3,1,2,0,0,2,0,0,1,1,1,2,3,0,3,0,1,0,3,0,0,0,0,3,1,3,0,2,0,1,0,0,0,0,0,0,2,2,0,0,2,2,0,0,3,1,2,0,0,1,1,1,1,1,1,0,0,0,2,1,3,2,2,3,3,3,1,0,0,2,1,1,0,0,1,1,1,1,0,3,2,2,1,1,3,1,1,0,3,2,0,1,3,3,3,3,3,1,0,0,0,0,0,2,2,3,0,3,3,0,2,0,0,0,0,0,1,1,0,3,3,3,1,0,3,0,0,1,3,3,3,2,3,1,0,0,0,2,3,3,0,0,0,3,3,0,3,0,2,2,1,3,0,0,0,3,1,1,3,0,3,0,3,0,3,1,3,3,0,0,3,2,2,1,0,1,0,3,2,1,0,2,1,2,1,0,0,2,3,0,2,2,3,1,3,0,1,0,0,2,0,1,2,1,3,0,1,3,3,1,1,1,1,3,0,3,1,0,3,0,2,0,0,2,0,2,1,3,3,0,3,1,0,1,1,3,3,3,1,0,3,2,0,3,1,0,1,2,1,1,1,3,1,0,3,0,0,3,1,0,3,3,3,3,1,1,3,3,0,3,1,3,2,1,3,3,1,1,3,0,2,3,1,1,3,2,3,0,3,2,1,1,1,3,3,3,3,1,1,3,0,0,1,0,1,3,1,0,1,0,0,1,0,0,0,0,1,3,0,0,1,3,0,0,3,0,1,3,0,0,1,0,3,1,3,1,0,2,0,1,2,1,3,1,0,2,2,0,0,0,3,0,2,0,0,0,1,1,2,3,1,3,2,0,0,1,3,0,3,1,1,3,2,1,1,1,2,1,1,0,3,1,0,3,1,1,3,0,2,3,1,1,3,1,0,3,1,2,1,1,1,3,1,1,1,0,3,1,1,1,3,0,1,2,1,0,3,1,1,3,3,3,0,1,0,3,0,0,1,0,2,0,1,2,0,2,2,3,1,0,0,1,2,0,3,1,1,1,3,1,1,1,3,3,0,1,1,0,3,1,0,0,0,3,1,0,0,3,3,2,2,1,1,0,1,1,0,0,3,2,2,3,0,1,3,2,0,0,1,1,3,0,1,2,0,2,3,0,1,0,1,1,2,0,1,3,0,1,2,2,1,2,2,0,1,3,0,0,3,1,3,3,1,0,0,1,3,1,1,3,0,1,0,3,0,1,3,3,1,1,1,1,1,0,3,3,0,3,3,1,1,3,0,2,0,0,1,1,0,2,2,1,2,0,1,1,3,2,1,2,0,1,3,1,1,3,3,2,0,1,2,3,3,2,0,1,0,0,3,1,2,0,2,3,0,2,3,0,1,3,1,1,1,2,0,3,3,2,0,0,2,1,1,1,1,1,0,3,3,1,2,3,0,3,0,0,3,0,0,3,3,0,1,0,3,1,0,1,0,0,2,0,1,2,3,1,3,3,2,1,0,1,3,1,0,3,2,0,2,1,3,2,3,1,1,1,1,0,1,0,3,3,0,2,2,1,3,3,0,0,0,0,0,1,0,2,0,3,2,1,0,0,3,3,1,1,1,2,2,0,1,2,3,1,3,0,0,0,1,1,0,0,0,1,1,0,1,3,3,3,1,0,1,1,2,1,3,0,1,0,1,2,0,1,1,2,2,2,2,2,3,0,3,0,1,3,0,1,2,2,3,1,0,0,3,2,1,3,1,3,2,0,0,0,3,1,3,2,3,2,2,0,2,1,0,0,0,1,1,0,1,0,2,3,3,3,1,0,3,2,1,1,1,0,3,1,2,3,1,1,3,0,2,0,0,3,3,0,0,3,3,1,1,1,1,3,0,0,0,0,0,3,1,3,3,3,2,0,0,0,3,0,2,2,2,1,1,1,2,3,0,3,3,3,0,1,1,1,3,0,3,0,2,1,0,1,1,1,1,1,3,1,3,0,1,1,1,1,1,3,1,3,0,2,0,2,1,1,1,0,1,3,2,3,0,0,0,2,1,3,0,0,1,3,3,0,2,1,0,3,3,0,0,1,1,3,3,3,3,0,0,2,3,3,0,0,0,2,0,3,3,0,0,2,0,2,0,0,1,1,0,0,1,0,1,1,3,1,3,3,3,0,1,0,2,3,2,0,0,0,3,2,1,1,1,1,0,0,1,3,0,0,0,3,0,1,3,0,1,1,2,3,0,3,2,2,1,1,1,0,1,1,0,3,0,0,3,3,0,1,1,1,1,1,0,3,0,1,3,1,1,3,3,0,1,0,1,3,0,3,3,1,1,3,1,0,3,1,0,1,1,1,0,0,1,3,0,0,0,0,0,3,0,3,3,0,0,0,1,0,1,0,0,0,1,3,0,1,1,0,1,1,3,0,1,1,3,1,1,1,3,1,0,1,1,0,0,0,2,1,1,1,0,3,0,0,0,0,0,3,0,0,0,0,0,0,3,3,0,3,0,0,1,0,0,0,1,1,1,3,2,0,2,0,0,1,1,0,0,0,0,3,2,0,0,1,2,0,0,0,0,3,1,3,2,3,3,1,2,1,3,3,1,0,3,3,1,0,3,3,2,1,1,1,1,1,0,1,0,0,3,1,1,3,0,2,2,1,1,3,0,1,1,1,2,1,1,2,1,0,2,3,0,1,3,2,0,3,1,0,3,3,1,3,0,3,3,3,1,1,1,1,1,3,1,3,0,3,3,2,0,3,1,1,1,1,0,1,1,3,1,1,0,0,0,3,0,3,1,3,1,0,3,1,0,0,1,0,0,1,1,2,0,1,3,0,0,3,1,0,1,1,0,1,1,1,0,0,1,0,0,3,2,0,1,3,0,0,3,1,0,0,0,1,3,0,0,1,1,3,1,0,0,0,0,1,0,0,0,3,2,0,3,0,2,1,1,0,3,0,1,0,1,0,0,1,0,1,3,0,0,0,2,2,0,1,2,0,0,1,1,3,2,0,3,1,3,1,3,3,0,3,0,1,3,0,2,3,0,3,1,1,3,3,0,0,3,1,0,3,3,3,3,3,0,3,3,2,1,1,0,1,0,0,1,3,0,0,1,1,3,1,1,3,1,2,2,0,1,3,1,1,3,2,1,1,3,1,0,1,3,1,0,3,3,3,0,1,0,1,1,0,0,1,1,0,1,1,1,0,0,1,3,0,3,1,3,0,3,0,0,0,1,1,3,0,2,1,1,0,3,2,2,1,1,0,3,1,1,1,1,3,3,0,3,2,0,2,1,2,2,2,1,2,1,0,2,3,2,0,3,3,0,3,0,2,2,1,3,3,3,1,2,1,3,1,3,0,0,2,0,3,3,0,0,0,0,0,3,2,1,1,1,3,0,2,1,1,1,0,1,3,3,1,3,3,0,1,1,0,1,0,0,2,2,1,0,1,0,1,1,3,0,1,0,1,1,1,1,3,3,0,3,1,1,1,1,0,3,0,1,3,0,2,3,3,0,3,3,0,3,1,2,0,0,0,1,1,0,3,1,0,2,1,1,3,0,1,3,1,0,3,3,1,0,0,1,1,0,0,3,0,2,1,1,1,3,2,2,1,1,2,3,0,1,2,1,1,3,0,0,1,1,2,1,3,0,0,1,0,3,3,0,1,3,2,1,0,2,2,1,1,0,1,1,3,0,1,3,1,0,3,2,1,0,1,1,3,0,0,3,3,2,2,0,0,2,1,2,1,1,0,1,1,1,3,0,2,1,0,0,3,0,3,1,0,0,1,1,0,3,3,0,0,1,1,3,3,1,1,1,3,1,3,0,1,0,1,3,3,0,3,1,0,3,1,3,3,1,0,1,0,0,3,3,1,3,0,0,3,3,1,3,0,1,3,2,0,1,3,0,3,1,1,3,0,2,0,0,0,3,1,2,1,3,2,3,1,2,1,1,3,3,0,0,3,1,1,0,0,2,1,1,3,0,1,2,3,3,3,3,1,0,1,0,1,3,3,1,3,0,2,3,0,0,2,1,1,3,1,3,0,1,1,3,2,1,0,1,2,0,1,0,0,1,0,1,0,3,0,0,3,2,0,1,1,1,0,1,1,0,0,3,1,0,1,0,3,2,1,1,3,0,3,1,0,3,0,3,0,2,3,0,0,0,0,1,1,1,0,2,1,1,1,0,3,2,0,1,1,1,1,3,0,0,1,0,2,2,2,2,1,1,1,3,1,3,1,0,2,1,1,1,3,1,1,3,0,0,3,2,0,1,1,3,1,1,2,2,1,1,3,0,2,1,1,0,3,2,3,2,0,3,3,3,1,0,1,3,3,1,1,0,1,3,1,1,0,3,0,0,1,2,1,3,1,1,3,1,0,3,0,1,3,0,2,2,1,1,3,0,1,3,0,0,1,1,0,0,1,0,1,0,1,3,0,0,1,1,0,3,0,3,0,1,1,0,0,3,2,2,3,2,2,1,2,1,2,0,3,2,3,0,0,1,0,1,2,0,2,0,0,0,2,1,0,1,0,3,0,1,1,0,0,2,2,1,1,0,1,1,0,1,0,1,0,1,1,0,1,1,3,2,3,1,1,0,0,0,0,0,2,2,1,1,3,3,1,2,0,3,0,1,2,2,2,0,3,0,0,3,1,1,3,0,3,3,3,0,3,3,0,1,1,3,1,0,2,0,0,2,3,3,3,3,3,3,3,1,3,3,1,2,1,0,2,2,0,3,3,3,3,3,1,3,2,0,2,1,1,3,3,3,3,0,1,1,0,1,3,1,1,0,2,1,1,3,0,2,1,1,1,1,3,0,1,1,1,1,1,1,0,0,1,3,0,2,2,0,2,2,2,1,0,1,3,2,2,1,1,1,1,1,0,0,1,0,2,2,1,0,3,1,0,1,1,1,1,2,1,3,0,0,0,3,1,1,1,1,3,0,2,0,0,2,3,1,1,1,0,1,3,1,1,3,0,0,0,1,0,1,0,3,1,1,2,3,0,3,3,0,1,3,1,2,1,0,3,1,0,2,2,0,2,3,0,3,1,0,0,3,1,0,1,1,3,2,0,2,1,3,1,0,1,1,0,3,0,2,3,1,3,0,0,3,0,2,0,0,0,0,1,0,0,1,1,2,0,0,0,1,1,0,0,0,3,0,0,3,3,1,0,0,2,1,0,1,3,2,1,3,3,0,3,3,0,1,0,0,3,3,3,3,0,1,3,2,2,2,3,1,3,1,3,0,3,3,3,3,0,1,1,1,3,1,1,3,0,1,0,0,2,1,1,3,1,0,2,0,2,3,0,1,3,3,1,2,0,2,3,1,3,1,1,1,3,3,1,0,1,1,0,3,3,3,1,1,2,0,1,2,2,1,0,3,1,3,0,1,2,2,1,3,1,0,0,1,0,3,3,3,3,3,3,2,3,0,2,1,1,0,1,0,2,2,1,3,3,1,1,0,1,2,2,0,1,3,3,1,0,1,2,3,1,0,3,3,0,3,3,2,2,1,3,1,0,0,1,3,3,3,1,1,3,1,0,1,3,0,3,1,3,2,1,3,3,1,0,3,1,1,2,1,1,0,0,1,3,0,0,3,0,3,3,3,1,0,1,3,3,3,0,1,0,3,1,1,0,0,0,1,0,3,1,0,1,3,3,3,2,2,1,3,3,1,2,0,0,2,1,1,2,1,1,2,1,1,3,2,0,3,0,1,3,2,2,1,0,3,3,3,3,2,3,0,2,0,3,2,3,2,2,3,3,3,2,0,1,3,0,3,3,3,1,3,2,3,0,3,2,3,1,3,1,1,0,3,1,3,0,3,3,2,0,3,2,0,2,2,2,3,1,3,3,0,1,3,1,3,3,3,3,0,2,3,0,3,0,0,0,3,0,2,3,0,1,1,2,3,3,0,0,1,3,3,1,1,0,0,3,3,0,0,1,3,0,2,3,3,3,3,2,0,1,0,0,1,0,3,3,1,0,0,0,0,0,0,2,0,2,3,0,0,3,0,0,0,1,3,3,1,2,1,1,3,3,0,0,3,3,3,3,0,0,3,0,0,3,1,0,0,1,0,1,1,1,3,1,1,3,0,2,1,1,3,3,0,1,3,0,1,3,0,0,3,0,0,3,3,0,3,3,0,1,0,3,3,3,3,2,0,1,3,0,1,1,0,1,0,0,1,3,1,0,0,1,2,2,1,3,0,1,0,3,0,2,0,0,0,0,0,3,1,1,0,1,1,1,1,3,3,0,1,2,0,2,3,2,1,2,2,1,3,3,1,2,0,1,1,1,3,0,3,0,3,1,1,1,1,1,2,1,1,1,2,1,2,3,0,-1,-2};
      HugeLongArray buffer = new HugeLongArray(0);

      HugeByteArray sequence = new HugeByteArray(s);

      BigSuffixTrayBuilder builder = new BigSuffixTrayBuilder(sequence, alphabet, "suffix");
      Comparator<Suffix> comparator = new Suffix.ComparatorBySuffix();
      Suffix[] sa = Suffix.buildSuffixArray(s, comparator);
      for (String method : buildingMethods4suffix) {
         builder.build(method);
         IBigSuffixDLL suffixDLL = builder.getSuffixDLL();

         try {
            BigLCP.buildLcpAndWriteToFile(suffixDLL, method, "suffix", 4, testoutput, buffer);
            int[] lcp = af.readArray((int[]) null);

            new File(testoutput + "4").delete();
            new File(testoutput + "4x").delete();

            assertEquals(sa.length, lcp.length);
            for (int j = 1; j < sa.length; j++) {
               int lcpValue = comparator.compare(sa[j - 1], sa[j]);
               lcpValue = lcpValue == 0 ? sa[j - 1].string.length : Math.abs(lcpValue) - 1;
               assertEquals(lcpValue, lcp[j]);
            }
         } catch (IllegalArgumentException e) {
            e.printStackTrace();
         } catch (IOException e) {
            e.printStackTrace();
         }
      }

      builder.setSpecialCharacterOrder("pos");
      comparator = new Suffix.ComparatorByPos(alphabet);
      sa = Suffix.buildSuffixArray(s, comparator);
      for (String method : buildingMethods4pos) {
         builder.build(method);
         IBigSuffixDLL suffixDLL = builder.getSuffixDLL();

         try {
            BigLCP.buildLcpAndWriteToFile(suffixDLL, method, "pos", 4, testoutput, buffer);
            int[] lcp = af.readArray((int[]) null);

            new File(testoutput + "4").delete();
            new File(testoutput + "4x").delete();

            assertEquals(sa.length, lcp.length);
            for (int j = 1; j < sa.length; j++) {
               int lcpValue = comparator.compare(sa[j - 1], sa[j]);
               lcpValue = lcpValue == 0 ? sa[j - 1].string.length : Math.abs(lcpValue) - 1;
               assertEquals(lcpValue, lcp[j]);
            }
         } catch (IllegalArgumentException e) {
            e.printStackTrace();
         } catch (IOException e) {
            e.printStackTrace();
         }
      }
   }
}
