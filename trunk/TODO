To Do
=====

- maybe always cut first 2 values of CSFASTA  
- ssp -> separatorPositions
Don't write toomanyhits file when there cannot be any because no limit was given.

General
-------

- add test cases


Refactoring
-----------

- rename Globals.stopplog to stopProjetLogging

- Globals.startProjectLogging(String fname): rename fname to projectname

- rename projectlog to projectappender, make it private

- write a Sequence class

- write a SequenceSet class

- use exceptions instead of Globals.terminate (remove g.terminate() method)

- split a Subcommand class from front-end classes where that has not been done 

- prefixes in output ("map:") should not be in the code

- move Globals.readAlphabet to ProjectInfo

- how to handle -D command-line option? is it necessary?

- Sequences.getSeparatorPosition(int i)

Bugs
----

- log.info within the help() method does not write anything when --quiet is selected


Features
--------

- handle repeat-masked sequences correctly: don't put all-lowercase q-grams into the index,
  but leave them in the sequence that is used for extending the q-hits
  
- multithreading

- shape of a q-gram

- run-length index: there are too many matches! -> need to filter out 
  useless matches in which run-lengths nucleotides differ too much

- make it possible to create an index over the reads

- make it possible to create an index over bisulfite reads

- compress the q-gram index: 
  The positions increase monotonically, only store differences between positions.
  (At least on disk and when we use 64 bit.)
  
- Since using filters speeds up matching a lot, use a better filter: Ignore overrepresented q-grams.

- make "verjinxer <subcommand> --help" work

- FASTQ support

Unit Tests
----------

- Write a unit test for HugeShortArray

- Collect problematic sequence files, automatically test the algorithms on them.

Other
-----

- don't continue on superfluous arguments


Brain Dump Area
===============

making the q-gram index cope with long sequences
------------------------------------------------

- perhaps: assume that each FASTA file is < 2GB, split the index up into as many files as necessary

- allow each bucket to have a size of 2 GB

- Überschneidungsbereich zwischen CGI und Read muss momentan nur >0bp sein

 - problem: a q-gram matches and its first character comes from a c/t substitution. the match is extended,
 using c/t substitutions. then, at the next position, on the same diagonal, the q-gram matches again,
 but this time we throw the match away and do not see that using g/a substitutions would lead to a longer match

- make qmatch accept fasta files

- should we have .bisulfiteqpos and .bisulfiteqbck files?

- move q-gram stuff into its own subdirectory

- when multiple project files are given, logging does not work correctly

- the indexed text can be longer if stride > 1: for example, if stride == 8, store q-gram position << 3 in the index

- split up q-gram index into three separate indices: one for unmodified, one for C->T, one for G->A.
Or somehow remember, for each q-gram, from which replacement type it originates.
This could speed up the matching since it is know what type of match is found and it's
then not necessary anymore to iterate over the sequence to know which match type it is.

- bisulfiteMatchLength nicht sofort aufrufen. besser: liste der aktiven intervalle speichern und
ein intervall verlängern, wenn ein neues q-gramm ankommt, das dieses verlängert. mit obiger änderung
hat man dann gleich den typ des matches (ct/ga) und kann dann den match (bei stride>1) nach li. verlängern.
wenn cmatchesc, kann man ihn auch nach rechts verlängern (und evtl. noch weiter nach links)
 und re.
verlängern

- neugefundene Matches müssen sofort aktiv gemacht werden bzw. es muss dafür gesorgt werden, dass sich q-gramme,
 die sich innerhalb eines buckets überlagern, rausgefiltert werden

- why is the separator in the prj file? it should already be in the alphabet file

- run-length index is not very well tested
